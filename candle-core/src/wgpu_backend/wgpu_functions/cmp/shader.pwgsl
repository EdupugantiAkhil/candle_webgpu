#include "../util.pwgsl"

#define op_binary.operation         op_meta[0]
#define op_binary.input1_layout     1u

fn bool_to_int(b : bool) -> u32{
    if b{
        return 1u;
    }
    return 0u;
}

@compute
@workgroup_size(64,1,1)
fn cmp_buffer_from_buffer(@builtin(global_invocation_id) global_id: vec3<u32>) { //One Shader needs to handle 4 comps
    let id = global_id.x;
    var output_value = 0u;

    let input1_layout = op_binary.input1_layout;
    let input2_layout = input1_layout + get_size(input1_layout);

 
    for (var i = 0u; i < 4; i++){
        let pos1 = get_index(input1_layout, id * 4 + i);
        let pos2 = get_index(input2_layout, id * 4 + i);
        
        if(!pos1.is_valid){
            continue;
        }

        let x = v_input1[pos1.id];
        let y = v_input2[pos2.id];

        switch(op_binary.operation){
            case 0u: { //eq
                output_value |= bool_to_int(x == y) << (i * 8);
            }
            case 1u: {//ne
                output_value |=  bool_to_int(x != y) << (i * 8);
            }
            case 2u: {//lt
                output_value |=  bool_to_int(x < y) << (i * 8);
            }
            case 3u: {//LE
                output_value |= bool_to_int(x <= y) << (i * 8);
            }
            case 4u: {//GT
                output_value |= bool_to_int(x > y) << (i * 8);
            }
            case 5u: {//GE
                output_value |=  bool_to_int(x >= y) << (i * 8);
            }
            default:{
                
            }
        }
    }

    v_dest_u32[id] = output_value;   
}