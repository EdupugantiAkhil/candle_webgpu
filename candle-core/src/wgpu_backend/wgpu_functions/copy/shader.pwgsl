#include "../util.pwgsl"

#define op_copy2d.d1                op_meta[0]
#define op_copy2d.d2                op_meta[1]
#define op_copy2d.input1_stride1    op_meta[2]
#define op_copy2d.dest_stride1      op_meta[3]
#define op_copy2d.input1_offset     op_meta[4]
#define op_copy2d.dest_offset       op_meta[5]

#define op_copy_strided.dest_offset op_meta[0]
#define op_copy_strided.input1_layout 1u

#define op_copy.copy_size op_meta[0]
#define op_copy.dest_offset op_meta[1]
#define op_copy.src_offset op_meta[2]


@compute
@workgroup_size(64,1,1)
fn copy_strided(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x + global_id.y * 65535 * 64;
    let pos1 = get_index(op_copy_strided.input1_layout, id);
    if(pos1.is_valid){
        let x = v_input1[pos1.id];
        v_dest[op_copy_strided.dest_offset + id] = x;
    }
}


@compute
@workgroup_size(64,1,1)
fn copy(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x + global_id.y * 65535 * 64;
    if(id < op_copy.copy_size){
        v_dest[op_copy.dest_offset + id] = v_input1[op_copy.src_offset + id];
    }
}


@compute
@workgroup_size(16,16,1)
fn copy2d(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let i1 = global_id.x + global_id.z * 65535 * 16;
    let i2 = global_id.y;

    if (i1 >= op_copy2d.d1){
        return;
    }
    if(i2 >= op_copy2d.d2){
        return;
    }

    v_dest[op_copy2d.dest_offset + op_copy2d.dest_stride1 * i1 + i2] = v_input1[op_copy2d.input1_offset + op_copy2d.input1_stride1 * i1 + i2];
}

@compute
@workgroup_size(16,16,1)
fn copy2d_transpose(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let i1 = global_id.y;
    let i2 = global_id.x + global_id.z * 65535 * 16;

    if (i1 >= op_copy2d.d1){
        return;
    }
    if(i2 >= op_copy2d.d2){
        return;
    }

    v_dest[op_copy2d.dest_offset + op_copy2d.dest_stride1 * i1 + i2] = v_input1[op_copy2d.input1_offset + op_copy2d.input1_stride1 * i1 + i2];
}
